name: Management website

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/frontend-management.yml"
      - "ui/wgpgw-management/**"
  pull_request:
    types: [opened, edited, synchronize, reopened]
    paths:
      - ".github/workflows/frontend-management.yml"
      - "ui/wgpgw-management/**"

env:
  INFRA_PATH: ui/wgpgw-management/infrastructure
  SPA_SRC: ./ui/wgpgw-management

permissions:
  id-token: write
  contents: read

jobs:
  compile:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Compile Spa
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false
      - uses: actions/setup-node@v4
        name: Set up Node.js 20
        with:
          # Version Spec of the version to use in SemVer notation.
          # It also emits such aliases as lts, latest, nightly and canary builds
          # Examples: 12.x, 10.15.1, >=10.15.0, lts/Hydrogen, 16-nightly, latest, node
          node-version: "20.x"
      - run: npm i --legacy-peer-deps
        working-directory: ${{ env.SPA_SRC }}
        name: Install packages
      - run: npm run build
        working-directory: ${{ env.SPA_SRC }}
        name: Build Angular App

      - name: Upload Published Files
        uses: actions/upload-artifact@v4
        with:
          name: beta
          path: ${{ env.SPA_SRC }}/dist/production

  infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Transpile main template
        working-directory: ${{ env.INFRA_PATH }}
        run: |
          az bicep build --file main.bicep
          az bicep build-params --file dev.parameters.bicepparam
          az bicep build-params --file prd.parameters.bicepparam
      - name: Publish template JSON
        uses: actions/upload-artifact@v4
        with:
          name: template
          path: "${{env.INFRA_PATH}}/*.json"

  deploy_to_beta:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    needs: [compile, infrastructure]
    runs-on: ubuntu-latest
    name: Deploy Beta
    steps:
      - name: Download SWA Content
        uses: actions/download-artifact@v4
        with:
          name: beta
          path: dist
      - name: Download ARM Template
        uses: actions/download-artifact@v4
        with:
          name: template
          path: ./infrastructure

      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.WGPGW_CLIENT_ID }}
          tenant-id: ${{ secrets.WGPGW_TENANT_ID }}
          subscription-id: ${{ secrets.WGPGW_SUBSCRIPTION_ID }}

      - uses: azure/arm-deploy@v2
        id: deploy
        with:
          scope: subscription
          deploymentName: spreaview-swa-dev
          region: westeurope
          template: ./infrastructure/main.json
          parameters: ./infrastructure/dev.parameters.json

      - name: Install Node
        uses: actions/setup-node@v4

      - name: Install SWA CLI
        run: npm install -g @azure/static-web-apps-cli

      - name: Get SWA deployment token
        id: get-secret-from-cli
        uses: azure/CLI@v2
        with:
          azcliversion: 2.42.0
          inlineScript: |
            SWA_SECRETS=$(az staticwebapp secrets list -n votr-mgmt-frontend-dev-westeurope-swa -g rg-votr-mgmt-frontend-dev-westeurope --query 'properties.apiKey' -o tsv )
            echo "::add-mask::$SWA_SECRETS"
            echo SWA_SECRETS=$SWA_SECRETS >> $GITHUB_OUTPUT

      - name: Deploy Artifacts to SWA
        run: swa deploy ./dist/browser --deployment-token ${{ steps.get-secret-from-cli.outputs.SWA_SECRETS }} --env production -V silly
#   deploy_to_prod:
#     if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#     needs: [compile, infrastructure, deploy_to_beta]
#     runs-on: ubuntu-latest
#     name: Deploy Production
#     steps:
#       - name: Download SWA Content
#         uses: actions/download-artifact@v4
#         with:
#           name: production
#           path: dist

#       - name: Download Artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: template
#           path: ./infrastructure

#       - name: Az CLI login
#         uses: azure/login@v1
#         with:
#           client-id: ${{ secrets.SPREAVIEW_PROD_CLIENT_ID }}
#           tenant-id: ${{ secrets.SPREAVIEW_PROD_TENANT_ID }}
#           subscription-id: ${{ secrets.SPREAVIEW_PROD_SUBSCRIPTION_ID }}

#       - uses: azure/arm-deploy@v2
#         id: deploy
#         with:
#           scope: subscription
#           deploymentName: spreaview-swa-dev
#           region: westeurope
#           template: ./infrastructure/main.json
#           parameters: ./infrastructure/prd.parameters.json

#       - name: Install Node
#         uses: actions/setup-node@v4

#       - name: Install SWA CLI
#         run: npm install -g @azure/static-web-apps-cli

#       - name: Get SWA deployment token
#         id: get-secret-from-cli
#         uses: azure/CLI@v2
#         with:
#           azcliversion: 2.42.0
#           inlineScript: |
#             SWA_SECRETS=$(az staticwebapp secrets list -n spreavw-frontend-prd-westeurope-swa -g rg-spreavw-frontend-prd-westeurope --query 'properties.apiKey' -o tsv )
#             echo "::add-mask::$SWA_SECRETS"
#             echo SWA_SECRETS=$SWA_SECRETS >> $GITHUB_OUTPUT

#       - name: Deploy Artifacts to SWA
#         run: swa deploy ./dist/browser --deployment-token ${{ steps.get-secret-from-cli.outputs.SWA_SECRETS }} --env production -V silly
